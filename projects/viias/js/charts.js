// Generated by CoffeeScript 1.9.0
(function() {
  window.K = {};

  K.italyProv = function() {
    var chart, colorScale, cssclass, data, future, height, scale, topoJsonFile, width;
    width = 250;
    height = 400;
    topoJsonFile = "";
    scale = 4000;
    data = d3.map();
    cssclass = "";
    colorScale = function() {};
    future = false;
    chart = function(selection) {
      var h, path, projection, w;
      w = width;
      h = height;
      projection = d3.geo.albers().center([0, 42]).rotate([347, 0]).parallels([35, 45]).scale(scale).translate([w / 2, h / 2]);
      path = d3.geo.path().projection(projection);
      return d3.json(topoJsonFile, function(error, it) {
        var m, map, subunits, svg, tt, ttfut;
        subunits = topojson.feature(it, it.objects.sub);
        svg = selection.insert("svg", ":first-child").attr("viewBox", "0 0 " + w + " " + h).attr("preserveAspectRatio", "xMidYMid").attr("width", w).attr("height", h);
        tt = textures.lines().size(4).strokeWidth(1).stroke("#ccc").background("whitesmoke");
        svg.call(tt);
        ttfut = textures.lines().size(4).strokeWidth(1).stroke("#ccc");
        svg.call(ttfut);
        svg.append("path").datum(topojson.mesh(it, it.objects.sub, function(a, b) {
          return a === b;
        })).attr("d", path).style({
          "stroke-width": "10px",
          "stroke": (function() {
            if (future) {
              return ttfut.url();
            } else {
              return tt.url();
            }
          })()
        });
        map = svg.append("g");
        map.selectAll("path").data(topojson.feature(it, it.objects.sub).features).enter().append("path").attr("d", path).attr("class", function(d) {
          var e;
          return cssclass + " " + colorScale((function() {
            try {
              return data.get(d.id)["tasso"];
            } catch (_error) {
              e = _error;
              return d3.select(this).style("fill", tt.url());
            }
          }).call(this));
        }).on("mouseover", function(d) {
          selection.select(".tasso").text((function() {
            try {
              return data.get(d.id)["tasso"];
            } catch (_error) {}
          })());
          selection.select(".provincia").text((function() {
            try {
              return data.get(d.id)["provincia"];
            } catch (_error) {}
          })());
          return d3.select(this).classed("focus", true);
        }).on("mouseout", (function() {
          try {
            return function(d) {
              return d3.select(this).classed("focus", false);
            };
          } catch (_error) {}
        })());
        selection.select(".anno").text(data.get("1")["anno"]);
        selection.select(".scenario").text((function() {
          var s;
          s = data.get("1")["scenario"];
          if (s !== "baseline") {
            return " " + s;
          } else {
            return "";
          }
        })());
        selection.select(".etichetta").text((function() {
          var s;
          s = data.get("1")["etichetta"];
          if (s === "short") {
            return "(short term)";
          } else if (s === "long") {
            return "(long term)";
          }
        })());
        selection.select(".inquinante").text(data.get("1")["inquinante"]);
        m = data.values().reduce((function(p, v) {
          if (v.tasso > p.tasso) {
            return v;
          } else {
            return p;
          }
        }));
        selection.select(".provincia").text(m.provincia);
        return selection.select(".tasso").text(m.tasso);
      });
    };
    chart.width = function(_) {
      width = _;
      return chart;
    };
    chart.height = function(_) {
      height = _;
      return chart;
    };
    chart.topoJsonFile = function(_) {
      topoJsonFile = _;
      return chart;
    };
    chart.scale = function(_) {
      scale = _;
      return chart;
    };
    chart.data = function(_) {
      data = _;
      return chart;
    };
    chart.cssclass = function(_) {
      cssclass = _;
      return chart;
    };
    chart.colorScale = function(_) {
      colorScale = _;
      return chart;
    };
    chart.future = function(_) {
      future = _;
      return chart;
    };
    return chart;
  };

  K.circle = function() {
    var baseline, baselinecle, chart, datum, height, radiusScale, width;
    datum = 0;
    width = 150;
    height = 150;
    radiusScale = void 0;
    baseline = void 0;
    baselinecle = void 0;
    chart = function(selection) {
      var col, d, delta, figcaption, h, svg, tt, w;
      d = datum;
      w = width;
      h = height;
      svg = selection.append("svg").attr("viewBox", "0 0 " + w + " " + h).attr("preserveAspectRatio", "xMidYMid").attr("width", w).attr("height", h);
      col = function(a) {
        if (a === "Italia") {
          return "whitesmoke";
        } else if (a === "Nord" || a === "Centro" || a === "Sud e Isole") {
          return "orangered";
        } else if (a === "Urbano" || a === "Non Urbano") {
          return "darkorange";
        }
      };
      tt = textures.lines().size(4).strokeWidth(1).stroke(col(d.area)).background("#2f2f2f");
      svg.call(tt);
      delta = 10;
      svg.append("line").attr({
        "x1": 0 + delta,
        "x2": h - delta,
        "y1": w / 2,
        "y2": w / 2
      }).attr("class", "single-circle-line").style({
        "stroke-dasharray": "3, 3",
        "shape-rendering": "crispEdges"
      });
      svg.append("line").attr({
        "x1": h / 2,
        "x2": h / 2,
        "y1": 0 + delta,
        "y2": w - delta
      }).attr("class", "single-circle-line").style({
        "stroke-dasharray": "3, 3",
        "shape-rendering": "crispEdges"
      });
      if (baselinecle) {
        svg.append("circle").attr({
          "r": radiusScale(baselinecle.mesi),
          "cx": w / 2,
          "cy": h / 2
        }).attr("class", "single-circle cle").style({
          "fill": tt.url()
        });
      }
      svg.append("circle").attr({
        "r": radiusScale(d.mesi),
        "cx": w / 2,
        "cy": h / 2
      }).attr("class", "single-circle").style({
        "fill": tt.url()
      });
      svg.append("circle").attr({
        "r": radiusScale(baseline.mesi),
        "cx": w / 2,
        "cy": h / 2
      }).attr("class", "single-circle-baseline");
      figcaption = selection.append("figcaption");
      figcaption.append("span").attr("class", "anno").text(d.anno);
      figcaption.append("span").attr("class", "scenario").text((function() {
        var s;
        s = d["scenario"];
        if (s === "baseline") {
          return "";
        } else if (s === "cle") {
          return " " + s;
        } else if (s === "target 1") {
          return " t1";
        } else if (s === "target 2") {
          return " t2";
        }
      })());
      figcaption.append("span").attr("class", "testo").text(", ");
      figcaption.append("span").attr("class", "dato").text(d.area);
      figcaption.append("br");
      figcaption.append("span").attr("class", "testo").text("Mesi di vita persi: ");
      figcaption.append("span").attr("class", "dato").text(d.mesi);
      figcaption.append("br");
      figcaption.append("span").attr("class", "testo").text("Tasso di m. (100K): ");
      return figcaption.append("span").attr("class", "dato").text(d.tasso);
    };
    chart.baseline = function(_) {
      baseline = _;
      return chart;
    };
    chart.baselinecle = function(_) {
      baselinecle = _;
      return chart;
    };
    chart.datum = function(_) {
      datum = _;
      return chart;
    };
    chart.width = function(_) {
      width = _;
      return chart;
    };
    chart.height = function(_) {
      height = _;
      return chart;
    };
    chart.radiusScale = function(_) {
      radiusScale = _;
      return chart;
    };
    return chart;
  };

  K.bars = function() {
    var chart, data, hbar, height, width, yScale;
    data = void 0;
    width = 300;
    height = 1000;
    hbar = 100;
    yScale = void 0;
    chart = function(selection) {
      var area, c, dat, delta, dx, h, lgx, o, singleLine, svg, tt, tt1, tt2, tt3, w, _i, _len, _ref;
      if (!yScale) {
        yScale = d3.scale.linear().domain([
          0, d3.max(data, function(d) {
            return d.tasso;
          })
        ]).range([0, hbar]);
      }
      w = width;
      h = height;
      dx = (w - 0) / 5;
      o = {
        "Pm2,5": "#41ab5d",
        "NO2": "#ef3b2c",
        "O3": "#4292c6"
      };
      svg = selection.append("svg").attr("viewBox", "0 0 " + w + " " + h).attr("preserveAspectRatio", "xMidYMid").attr("width", w).attr("height", h);
      tt1 = textures.lines().size(7).strokeWidth(1).stroke("#41ab5d");
      svg.call(tt1);
      tt2 = textures.lines().size(7).strokeWidth(1).stroke("#ef3b2c");
      svg.call(tt2);
      tt3 = textures.lines().size(7).strokeWidth(1).stroke("#4292c6");
      svg.call(tt3);
      tt = {
        "Pm2,5": tt1,
        "NO2": tt2,
        "O3": tt3
      };
      c = {
        "Italia": "Italia",
        "Nord": "Nord",
        "Centro": "Centro",
        "Sud e Isole": "Sud e Isole",
        "Urbano": "Urbano",
        "Non Urbano": "Non Urbano",
        "Suburbano ad alta densità": "Suburbano",
        "Non urbano a media densità": "> Non Urbano"
      };
      delta = 1.3;
      singleLine = function(data, area, sel) {
        var bar, dataArea, l, value;
        dataArea = data;
        if (dataArea.length) {
          l = sel.append("g").attr("transform", (function() {
            switch (area) {
              case "Italia":
                return "translate(0,0)";
              case "Nord":
                return "translate(0," + (hbar * 1 * delta) + ")";
              case "Centro":
                return "translate(0," + (hbar * 2 * delta) + ")";
              case "Sud e Isole":
                return "translate(0," + (hbar * 3 * delta) + ")";
              case "Urbano":
                return "translate(0," + (hbar * 4 * delta) + ")";
              case "Non Urbano":
                return "translate(0," + (hbar * 5 * delta) + ")";
              case "Suburbano ad alta densità":
                return "translate(0," + (hbar * 6 * delta) + ")";
              case "Non urbano a media densità":
                return "translate(0," + (hbar * 7 * delta) + ")";
            }
          })());
          value = l.append("text").attr("dy", -2).attr("class", "ma-text").style("opacity", 0);
          bar = l.selectAll("g").data(dataArea).enter();
          bar.append("rect").attr("width", dx).attr("x", function(d) {
            switch (d.anno + " " + d.scenario) {
              case "2005 baseline":
                return dx * 0;
              case "2010 baseline":
                return dx * 1;
              case "2020 cle":
                return dx * 2;
              case "2020 target 1":
                return dx * 3;
              case "2020 target 2":
                return dx * 4;
            }
          }).attr("y", function(d) {
            return hbar - yScale(d.tasso);
          }).attr("height", function(d) {
            return yScale(d.tasso);
          }).attr("class", "bars").style("fill", function(d) {
            var _ref;
            if ((_ref = d.anno) === "2005" || _ref === "2010") {
              return o[d.inquinante];
            } else {
              return tt[d.inquinante].url();
            }
          });
          bar.append("rect").attr("width", dx).attr("x", function(d) {
            switch (d.anno + " " + d.scenario) {
              case "2005 baseline":
                return dx * 0;
              case "2010 baseline":
                return dx * 1;
              case "2020 cle":
                return dx * 2;
              case "2020 target 1":
                return dx * 3;
              case "2020 target 2":
                return dx * 4;
            }
          }).attr("y", 0).attr("height", hbar).style("opacity", 0).on("mouseover", function(d) {
            return value.transition().duration(0).text(d.tasso).attr("x", (function() {
              switch (d.anno + " " + d.scenario) {
                case "2005 baseline":
                  return dx * 0 + dx / 2;
                case "2010 baseline":
                  return dx * 1 + dx / 2;
                case "2020 cle":
                  return dx * 2 + dx / 2;
                case "2020 target 1":
                  return dx * 3 + dx / 2;
                case "2020 target 2":
                  return dx * 4 + dx / 2;
              }
            })()).attr("y", hbar - yScale(d.tasso)).style("opacity", 1);
          }).on("mouseout", function() {
            return value.transition().style("opacity", 0);
          });
          return l.append("text").text(c[area]).attr("x", 0).attr("dy", hbar + 12).attr("dx", 0).attr("class", "ma-text-y");
        }
      };
      _ref = ["Italia", "Nord", "Centro", "Sud e Isole", "Urbano", "Non Urbano", "Suburbano ad alta densità", "Non urbano a media densità"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        area = _ref[_i];
        dat = data.filter(function(v) {
          return v.area === area;
        });
        singleLine(dat, area, svg);
      }
      lgx = svg.append("g").attr("transform", "translate(" + (dx / 2) + "," + (hbar * (function() {
        if (data[0].inquinante === "O3") {
          return 8;
        } else {
          return 6;
        }
      })() * delta + 20) + ")");
      lgx.append("text").text("05").attr("class", "ma-text").attr("x", dx * 0);
      lgx.append("text").text("10").attr("class", "ma-text").attr("x", dx * 1);
      lgx.append("text").text("20 cle").attr("class", "ma-text").attr("x", dx * 2);
      if (data[0].inquinante !== "O3") {
        lgx.append("text").text("20 t1").attr("class", "ma-text").attr("x", dx * 3);
        return lgx.append("text").text("20 t2").attr("class", "ma-text").attr("x", dx * 4);
      }
    };
    chart.data = function(_) {
      data = _;
      return chart;
    };
    chart.width = function(_) {
      width = _;
      return chart;
    };
    chart.height = function(_) {
      height = _;
      return chart;
    };
    chart.hbar = function(_) {
      hbar = _;
      return chart;
    };
    chart.yScale = function(_) {
      yScale = _;
      return chart;
    };
    return chart;
  };

  K.lines = function() {
    var chart, code, data, height, width, yScale;
    width = 150;
    height = 200;
    code = void 0;
    data = void 0;
    yScale = void 0;
    chart = function(selection) {
      var dat, dat1, dat2, dat3, dat4, drawSegment, dx, figcaption, figure, h, he, lines, m, r, svg, value, w;
      dat = data.filter(function(v) {
        return v.codice === "" + code;
      });
      dat1 = d3.map(dat.filter(function(v) {
        return v.inquinante === "Pm2,5";
      }), function(d) {
        return d.anno_e;
      });
      dat2 = d3.map(dat.filter(function(v) {
        return v.inquinante === "NO2";
      }), function(d) {
        return d.anno_e;
      });
      dat3 = d3.map(dat.filter(function(v) {
        return v.inquinante === "O3" && v.etichetta === "short";
      }), function(d) {
        return d.anno_e;
      });
      dat4 = d3.map(dat.filter(function(v) {
        return v.inquinante === "O3" && v.etichetta === "long";
      }), function(d) {
        return d.anno_e;
      });
      w = width;
      he = height;
      m = 15;
      dx = 40;
      r = 3;
      h = 150;
      figure = selection.append("figure");
      svg = figure.append("svg").attr("viewBox", "0 0 " + w + " " + he).attr("preserveAspectRatio", "xMidYMid").attr("width", w).attr("height", he);
      figcaption = figure.append("figcaption");
      figcaption.append("span").text(dat[0].regione).attr("class", "cap dato");
      lines = svg.append("g").attr("transform", "translate(0,15)");
      value = svg.append("text").attr("transform", "translate(0,15)").text("").attr("class", "line-text").attr("dy", -7).style("opacity", 0);
      drawSegment = function(cl, x1, y1, x2, y2, d1, d2, sc) {
        if (sc == null) {
          sc = void 0;
        }
        lines.append("line").attr("class", cl).attr({
          "x1": x1,
          "x2": x2,
          "y1": y1,
          "y2": y2
        });
        lines.append("circle").attr("class", cl).attr({
          "cx": x1,
          "cy": y1,
          "r": r
        }).on("mouseover", function() {
          return value.transition().duration(0).text(d1).attr({
            "x": x1,
            "y": y1
          }).style("opacity", 1);
        }).on("mouseout", function() {
          return value.transition().duration(0).style("opacity", 0).text("");
        });
        return lines.append("circle").attr("class", cl).attr({
          "cx": x2,
          "cy": y2,
          "r": r
        }).on("mouseover", function() {
          return value.transition().duration(0).text(d2 + (function() {
            if (sc) {
              return " " + sc;
            } else {
              return "";
            }
          })()).attr({
            "x": x2,
            "y": y2
          }).style("opacity", 1);
        }).on("mouseout", function() {
          return value.transition().duration(0).style("opacity", 0).text("");
        });
      };
      drawSegment("line-pm25", m, h - yScale(dat1.get("2005 baseline").tasso), m + dx, h - yScale(dat1.get("2010 baseline").tasso), dat1.get("2005 baseline").tasso, dat1.get("2010 baseline").tasso);
      drawSegment("line-pm25 line-cle", m + dx, h - yScale(dat1.get("2010 baseline").tasso), m + 3 * dx, h - yScale(dat1.get("2020 cle").tasso), dat1.get("2010 baseline").tasso, dat1.get("2020 cle").tasso, "cle");
      drawSegment("line-pm25 line-t1", m + dx, h - yScale(dat1.get("2010 baseline").tasso), m + 3 * dx, h - yScale(dat1.get("2020 target 1").tasso), dat1.get("2010 baseline").tasso, dat1.get("2020 target 1").tasso, "t1");
      drawSegment("line-pm25 line-t2", m + dx, h - yScale(dat1.get("2010 baseline").tasso), m + 3 * dx, h - yScale(dat1.get("2020 target 2").tasso), dat1.get("2010 baseline").tasso, dat1.get("2020 target 2").tasso, "t2");
      drawSegment("line-no2", m, h - yScale(dat2.get("2005 baseline").tasso), m + dx, h - yScale(dat2.get("2010 baseline").tasso), dat2.get("2005 baseline").tasso, dat2.get("2010 baseline").tasso);
      drawSegment("line-no2 line-cle", m + dx, h - yScale(dat2.get("2010 baseline").tasso), m + 3 * dx, h - yScale(dat2.get("2020 cle").tasso), dat2.get("2010 baseline").tasso, dat2.get("2020 cle").tasso, "cle");
      drawSegment("line-no2 line-t1", m + dx, h - yScale(dat2.get("2010 baseline").tasso), m + 3 * dx, h - yScale(dat2.get("2020 target 1").tasso), dat2.get("2010 baseline").tasso, dat2.get("2020 target 1").tasso, "t1");
      drawSegment("line-no2 line-t2", m + dx, h - yScale(dat2.get("2010 baseline").tasso), m + 3 * dx, h - yScale(dat2.get("2020 target 2").tasso), dat2.get("2010 baseline").tasso, dat2.get("2020 target 2").tasso, "t2");
      drawSegment("line-o3s", m, h - yScale(dat3.get("2005 baseline").tasso), m + dx, h - yScale(dat3.get("2010 baseline").tasso), dat3.get("2005 baseline").tasso, dat3.get("2010 baseline").tasso);
      drawSegment("line-o3s line-cle", m + dx, h - yScale(dat3.get("2010 baseline").tasso), m + 3 * dx, h - yScale(dat3.get("2020 cle").tasso), dat3.get("2010 baseline").tasso, dat3.get("2020 cle").tasso, "cle");
      drawSegment("line-o3l", m, h - yScale(dat4.get("2005 baseline").tasso), m + dx, h - yScale(dat4.get("2010 baseline").tasso), dat4.get("2005 baseline").tasso, dat4.get("2010 baseline").tasso);
      return drawSegment("line-o3l line-cle", m + dx, h - yScale(dat4.get("2010 baseline").tasso), m + 3 * dx, h - yScale(dat4.get("2020 cle").tasso), dat4.get("2010 baseline").tasso, dat4.get("2020 cle").tasso, "cle");
    };
    chart.data = function(_) {
      data = _;
      return chart;
    };
    chart.width = function(_) {
      width = _;
      return chart;
    };
    chart.height = function(_) {
      height = _;
      return chart;
    };
    chart.code = function(_) {
      code = _;
      return chart;
    };
    chart.yScale = function(_) {
      yScale = _;
      return chart;
    };
    return chart;
  };

  K.italyProvGrid = function() {
    var chart, cssclass, cutoff, data, height, scale, topoJsonFile, width;
    width = 250;
    height = 400;
    topoJsonFile = "";
    scale = 4000;
    data = d3.map();
    cssclass = "";
    cutoff = void 0;
    chart = function(selection) {
      var h, path, projection, w;
      w = width;
      h = height;
      projection = d3.geo.albers().center([0, 42]).rotate([347, 0]).parallels([35, 45]).scale(scale).translate([w / 2, h / 2]);
      path = d3.geo.path().projection(projection);
      return d3.json(topoJsonFile, function(error, it) {
        var m, map, svg, tt;
        svg = selection.insert("svg", ":first-child").attr("viewBox", "0 0 " + w + " " + h).attr("preserveAspectRatio", "xMidYMid").attr("width", w).attr("height", h);
        tt = textures.lines().size(8).strokeWidth(1).stroke("whitesmoke");
        svg.call(tt);
        svg.append("path").datum(topojson.mesh(it, it.objects.sub, function(a, b) {
          return a === b;
        })).style("fill", tt.url()).style("fill-opacity", 0.5).attr("d", path);
        map = svg.append("g");
        map.selectAll("path").data(topojson.feature(it, it.objects.sub).features).enter().append("path").attr("d", path).style({
          "stroke": "whitesmoke",
          "stroke-width": 1,
          "fill": "darkred"
        }).style("opacity", function(d) {
          if (data.get(d.id)["valore"] > cutoff) {
            return 1;
          } else {
            return 0;
          }
        }).on("mouseover", function(d) {
          selection.select(".valore").text((function() {
            try {
              return data.get(d.id)["valore"];
            } catch (_error) {}
          })());
          selection.select(".provincia").text((function() {
            try {
              return data.get(d.id)["provincia"];
            } catch (_error) {}
          })());
          return d3.select(this).classed("focus", true);
        }).on("mouseout", (function() {
          try {
            return function(d) {
              return d3.select(this).classed("focus", false);
            };
          } catch (_error) {}
        })());
        selection.select(".anno").text(data.get("1")["anno"]);
        selection.select(".scenario").text((function() {
          var s;
          s = data.get("1")["scenario"];
          if (s !== "Baseline" && s !== "baseline") {
            return " " + s;
          } else {
            return "";
          }
        })());
        selection.select(".etichetta").text((function() {
          var s;
          s = data.get("1")["etichetta"];
          if (s === "short") {
            return "(short term)";
          } else if (s === "long") {
            return "(long term)";
          }
        })());
        selection.select(".inquinante").text(data.get("1")["inquinante"]);
        m = data.values().reduce((function(p, v) {
          if (v.valore > p.valore) {
            return v;
          } else {
            return p;
          }
        }));
        selection.select(".provincia").text(m.provincia);
        return selection.select(".valore").text(m.valore);
      });
    };
    chart.width = function(_) {
      width = _;
      return chart;
    };
    chart.height = function(_) {
      height = _;
      return chart;
    };
    chart.topoJsonFile = function(_) {
      topoJsonFile = _;
      return chart;
    };
    chart.scale = function(_) {
      scale = _;
      return chart;
    };
    chart.data = function(_) {
      data = _;
      return chart;
    };
    chart.cssclass = function(_) {
      cssclass = _;
      return chart;
    };
    chart.cutoff = function(_) {
      cutoff = _;
      return chart;
    };
    return chart;
  };

}).call(this);
